Harshini S- 185001058
//A8: Mini Project – Centepede Collisions
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
int seg_1[30][2],seg_last[30][2];
int length[30],dir[30][2],grid[30][30];
char d[30];

void direction(int n)
{
	int i;
	for(i=0;i<n;++i)
	{
		if(d[i]=='r')
		{
			dir[i][0]=1;
			dir[i][1]=0;
			seg_last[i][0]=seg_1[i][0]-length[i]+1;
			seg_last[i][1]=seg_1[i][1];
		}
		else if(d[i]=='l')
		{
			dir[i][0]=-1;
			dir[i][1]=0;
			seg_last[i][0]=seg_1[i][0]+length[i]-1;
			seg_last[i][1]=seg_1[i][1];
		}
		else if(d[i]=='u')
		{
			dir[i][0]=0;
			dir[i][1]=1;
			seg_last[i][0]=seg_1[i][0];
			seg_last[i][1]=seg_1[i][1]-length[i]+1;
		}
		else
		{
			dir[i][0]=0;
			dir[i][1]=-1;
			seg_last[i][0]=seg_1[i][0];
			seg_last[i][1]=seg_1[i][1]+length[i]-1;
		}
	}
	return;
}
void segment(int pos,int x,int y,int n)
{
	int l1,l2;
	if(l1=dir[pos][0]!=0)
	{
		abs(seg_1[pos][0]-x);
	}
	else
	{
		abs(seg_1[pos][1]-y);
	}
	l2=length[pos]-1-l1;
	if(l2>0)
	{
		length[n]=l2;
		seg_1[n][0]=x-dir[pos][0];
		seg_1[n][1]=y-dir[pos][1];
		seg_1[n][0]=dir[pos][0];
		seg_1[n][1]=dir[pos][1];
		++n;
	}
	return;
}
void search(int n)
{
	int flag=1,coll=0;
	int i,j,x,y,p1,p2,m;
	while(flag)
	{
		flag=0;
		for(i=0;i<n;i++)
		{	
			if(length[i]>0)
			{	
				p1=dir[i][0]!=0?0:1;
				p2=p1==0?1:0;
				if(seg_1[i][p1]+dir[i][p1]<=0 || seg_1[i][p1]+dir[i][p1]>=29)
				{
					length[i]--;
				}
				else if(grid[seg_1[i][0]+dir[i][0]][seg_1[i][1]+dir[i][1]]==-5)
				{
					length[i]--;	
				}
				else
				{
					coll=0;
				for(j=0;j<n;j++)
				{
					if(j!=i&&length[j]!=0)
					{
						if((seg_1[i][p1]+dir[i][p1]==seg_1[j][p1])||(seg_1[i][p1]+dir[i][p1]==seg_last[j][p1]))
						{
							if((seg_1[j][p2]-seg_1[i][p2])*(seg_1[j][p2]-dir[j][p2]*(length[j]-1)-seg_1[i][p2])<=0)
							{
								coll=1;
								length[i]--;
								x=seg_1[i][0]+dir[i][0];
								y=seg_1[i][1]+dir[i][1];
								if(grid[x+1][y]==-5)
								{
									grid[x][y]=-1;
									segment(j,x+1,y,n);
									break;
								}
								else if(grid[x-1][y]==-5)
								{
									grid[x][y]=-1;
									segment(j,x-1,y,n);
									break;
								}
								else if(grid[x][y+1]==-5)
								{
									grid[x][y]=-1;
									segment(j,x,y+1,n);
									break;
								}
								else if(grid[x][y-1]==-5)
								{
									grid[x][y]=-1;
									segment(j,x,y-1,n);
									break;
								}
								else
								{
									grid[x][y]=-5;
									segment(j,x,y,n);
									break;
								}										
								
							}
						}
					}
					seg_last[j][p1]=0;
				}
				if(coll==0)
				{
					seg_1[i][p1]+=dir[i][p1];
					seg_1[j][p1]+=dir[j][p1];

					
				}	
				}
			}
		}
		for(m=0;m<n;m++)
		{
			if(length[m]!=0)
			{
				flag=1;
				break;
			}
		}
	}
	return;
}

void main()
{
	int arr1[30]={0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2};
	int arr2[30]={0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9};
	int i,j,n;
	memset(grid,-1,sizeof(grid));
	memset(length,-1,sizeof(length));
	memset(seg_1,-1,sizeof(seg_1));
	memset(seg_last,-1,sizeof(seg_last));
	memset(dir,-1,sizeof(dir));
	printf("number of Centipedes : \n");
	scanf(" %d",&n);
	printf("Enter specifications of centipede \n");
	for(i=0;i<n;i++)
	{
		scanf(" %c %d %d %d",&d[i],&length[i],&seg_1[i][0],&seg_1[i][1]);
	}
	direction(n);
	search(n);
	printf("  ");
	for(i=0;i<30;i++)
		printf(" %d",arr1[i]);
	printf("\n");
	printf("  ");
	for(i=0;i<30;i++)
		printf(" %d",arr2[i]);
	printf("\n");
	for(i=0;i<30;i++)
	{
		printf("%02d",29-i);
		for(j=0;j<30;j++)
		{
			if(grid[j][29-i]==-5)
			{
				printf(" x");
			}
			else 
			{
				printf(" .");	
			}
			
		}
		printf("\n");
	}
	printf("\n");
}

/*Output:-
number of Centipedes :
10
Enter specifications of centipede
r 9 11 23
u 8 11 17
u 5 15 15
u 5 15 8
d 9 23 13
u 6 23 6
r 9 8 9
l 13 17 0
u 12 13 11
l 5 20 9
   0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
29 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23 . . . . . . . . . . . x . . . x . . . . . . . . . . . . . .
22 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
09 . . . . . . . . . . . . . x . x . . . . . . . x . . . . . .
08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
00 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

